// Mocks generated by Mockito 5.4.6 from annotations
// in habit_tracker/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:habit_tracker/models/habit.dart' as _i6;
import 'package:habit_tracker/services/auth_service.dart' as _i2;
import 'package:habit_tracker/services/database_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.User?> get user =>
      (super.noSuchMethod(
            Invocation.getter(#user),
            returnValue: _i3.Stream<_i4.User?>.empty(),
          )
          as _i3.Stream<_i4.User?>);

  @override
  _i3.Future<_i4.User?> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i3.Future<_i4.User?>.value(),
          )
          as _i3.Future<_i4.User?>);

  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i5.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i6.Habit>> getHabits() =>
      (super.noSuchMethod(
            Invocation.method(#getHabits, []),
            returnValue: _i3.Stream<List<_i6.Habit>>.empty(),
          )
          as _i3.Stream<List<_i6.Habit>>);

  @override
  _i3.Future<void> addHabit(_i6.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#addHabit, [habit]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateHabit(_i6.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#updateHabit, [habit]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteHabit(String? habitId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteHabit, [habitId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
